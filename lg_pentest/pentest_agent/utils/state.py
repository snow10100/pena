from langgraph.graph import add_messages
from langchain_core.messages import BaseMessage, AnyMessage
from typing import TypedDict, Annotated, Sequence, List,  Literal, Optional
import operator

class AgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], add_messages]

class RecoderOptions(TypedDict):
    report: str
    generate_final_report: bool
    file_names: List[str]

# Define the state structure
class PentestState(TypedDict):
    messages: Annotated[Sequence[AnyMessage], operator.add]
    current_step: str
    pentest_results: dict
    pentest_tasks: list
    evaluation: str
    recorder_options: Optional[RecoderOptions]

# Define the config
class GraphConfig(TypedDict):
    model_name: Literal["anthropic", "openai"]
    pentester_model: Literal["ollama"," anthropic", "openai"]
