from utils.state import PentestState
from utils.model import _get_model

from langchain_core.pydantic_v1 import BaseModel, Field


class Report(BaseModel):
    report: str = Field(description='This is the summary written in Latex')
    file_name: str = Field(description='This is the filename of the Latex report')


def recorder(state: PentestState):
    model = _get_model().with_structured_output(Report)
    generate_final_report = state['recorder_options']['generate_final_report']

    if generate_final_report:
        return recorder_final(state, model)
    else:
        state = recorder_summary(state, model)
        return recorder_final(state, model)

def recorder_summary(state: PentestState, model):
    prompt = '''You are tasked with recording and summarizing information of a chat between a human and an LLM in \
    which the LLM is utilizing the command line to execute tasks. You have as an input the history of the last command that ran \
    which inclueds the output logs and the message prompt for previous commands:
     
    <history>
    {history}
    </history>

    Generate a summary for this using latex.
    '''
    formats = {
            'history': {'user_prompts': state['messages']} | state['pentest_results'],
        }
    prompt = prompt.format(**formats)

    response = model.invoke(prompt)

    state['recorder_options']['file_names'].append(response.file_name)
    
    with open(response.file_name, 'w') as f:
        f.write(response.report)

    return state

def recorder_final(state: PentestState, model):
    prompt = '''You are tasked with summarizing and reporting information of a chat between a human and an LLM in \
    whihc the LLM is utilizing the command line to execute tasks. You have as input the history of summaries of all previous \
    outputs and interactions between the human and the LLM:

    <history>
    {history}
    </history>

    You are tasked with generating a final report in a Latex format. Also return the file path as a relative path.
    '''

    summaries = []
    file_names = state['recorder_options']['file_names']
    for file_name in file_names:
        with open(file_name) as f:
            summary = f.read()
            summaries.append(summary)

    formats = {
            'history': summaries
        }
    prompt = prompt.format(**formats)

    response = model.invoke(prompt)
    state['recorder_options']['report'] = response.report
    with open(response.file_name, 'w') as f:
        f.write(response.report)

    return state

