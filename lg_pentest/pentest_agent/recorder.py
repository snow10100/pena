from utils.state import PentestState
from utils.model import _get_model

from langchain_core.pydantic_v1 import BaseModel, Field

prompt = '''You are tasked with recording and summarizing information of a chat between a human and an LLM in \
which the LLM is utilizing the command line to execute tasks. You have as an input the history of the last command that ran \
which inclueds the output logs and the message prompt for previous commands:
 
<history>
{history}
</history>

Generate a summary for this using latex.
'''

final_prompt = '''You are tasked with summarizing and reporting information of a chat between a human and an LLM in \
whihc the LLM is utilizing the command line to execute tasks. You have as input the history of summaries of all previous \
outputs and interactions between the human and the LLM:

<history>
{history}
</history>

You are tasked with generating a final report in a Latex format.
'''

class Report(BaseModel):
    report: str = Field(description='This is the summary written in Latex')
    file_name: str = Field(description='This is the filename of the Latex report')


def recorder(state: PentestState):
    model = _get_model().with_structured_output(Report)
    generate_final_report = state['recorder_options']['generate_final_report']

    if generate_final_report:
        prompt = final_report_prompt

        formats = {
                'history': summaries
            }
        propmt = prompt.format(**formats)

    else:
        formats = {
                'history': {'user_prompts': state['messages']} | state['pentest_results'],
            }
        prompt = prompt.format(**formats)

    response = model.invoke(prompt)

    state['recorder_options']['summaries'].append(response.report)

    return state
