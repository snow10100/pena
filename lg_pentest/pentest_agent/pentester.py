from typing import TypedDict, Literal, Optional, List, Annotated
from lg_pentest.pentest_agent.utils.model import _get_model
from lg_pentest.pentest_agent.utils.state import PentestState
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.pydantic_v1 import BaseModel, Field

class Results(BaseModel):
    """The results that the pentester needs to work"""
    message: str = Field(description="Pentester though process")
    phase: str = Field(description="Current phase of pentesting, such as scanning or exploitation")
    tasks: List[dict] = Field(description="Task to perform to be done with the current phase")
    results: List[str] = Field(description="Summary of results")
    tool_use: bool = Field(description="If we still need to call tools to perform finish a task")
    software: List[str] = Field(description="program names that we will use to do the tasks")

    

system_prompt = SystemMessage("""
You are a pentester working with a team of AI agents, you will receive tasks from 
your supervisor, and you will have to use tools by calling a tool agent to 
use the software instead of you. Once everything is done, you pass your results
to the evaluator. 
""")


def pentester(state: PentestState) -> PentestState:
    # print(state)
    tasks = f"""
    Do the following tasks:

    {state['pentest_tasks']}
    """
    print(f'{tasks = }')
    messages = [system_prompt, HumanMessage(content=tasks)] 
    model = _get_model().with_structured_output(Results)
    response = model.invoke(messages)
    print(f'pentester:\n{response = }')
    if response.tool_use:
        return {'current_step': 'tool'}
    return {'current_step': 'evaluator'}
