from typing_extensions import Annotated, TypedDict, Literal, Sequence, Dict
import operator
from langchain_core.messages import BaseMessage, AnyMessage, HumanMessage
from lg_pentest.pentest_agent.utils.model import _get_model
from lg_pentest.pentest_agent.utils.state import PentestState
from langchain_core.messages import SystemMessage

system_prompt = SystemMessage("""
You are the supervisor of AI agents responsible for overseeing their performance, 
you send the pentesting tasks to pentester agent, and you receive the response 
from an evaluator agent, if the evaluator says everything is done, then end the program,

Try to end as soon as possible. 
""")

class Task(TypedDict):
    supervisor_thought: Annotated[str, ..., "supervisor thoughts that includes decision making based on evaluator prompt if he responded"]
    tasks: list
    next_agent: Literal['pentester', 'evaluator', 'recorder', '__end__']
    done: bool

def _swap_messages(messages):
    new_messages = []
    for m in messages:
        if m['role'] == 'assistant':
            new_messages.append({"role": "user", "content": m['content']})
        else:
            new_messages.append({"role": "assistant", "content": m['content']})
    return new_messages

# Define node functions
def supervisor(state: PentestState) -> PentestState:
    if state['evaluation'] and 'end' in state['evaluation']:
        return {
                'messages': [{'role': 'assistant', 'content': 'done, bye!'}],
                'current_step': '__end__',
                }
    messages = [system_prompt] + state['messages']
    if state['evaluation']:
        messages = [system_prompt] + [HumanMessage(content=f"based on {state['evaluation']}, what should we do now to finish the tasks: {state['pentest_tasks']}")]
    # messages = [system_prompt] + state['messages']
    model = _get_model().with_structured_output(Task)
    response = model.invoke(messages) # error here
    if response['done']:
        return {
                'messages': [{'role': 'assistant', 'content': 'done, bye!'}],
                'current_step': '__end__',
                }
    state['current_step'] = response['next_agent']
    if response['next_agent'] == 'pentester':
        return {
                'messages': [{'role': 'assistant', 
                             'content': response['supervisor_thought']}],
                'current_step': 'pentester',
                'pentest_tasks': response['tasks'],
                }
    return {
                'messages': [{'role': 'assistant', 'content': 'done, bye!'}],
                'current_step': '__end__',
            }
