from typing import Literal
from langchain_core.pydantic_v1 import BaseModel
from lg_pentest.pentest_agent.utils.model import _get_model
from lg_pentest.pentest_agent.utils.state import PentestState
from langchain_core.messages import SystemMessage

system_prompt = SystemMessage("""
You are the supervisor of AI agents responsible for overseeing their performance, 
you send the pentesting tasks to pentester agent, and you receive the response 
from an evaluator agent, if the evaluator says everything is done, then end the program,
if you need to write the progress so far, you send the details to recorder agent. 

When you are done. Set Task tool variable done to True.
""")

class Task(BaseModel):
    tasks: list
    next_agent: Literal['pentester', 'evaluator', 'recorder', '__end__']
    done: bool

# Define node functions
def supervisor(state: PentestState) -> PentestState:
    if 'end' in state['evaluation']:
        return {'current_step': '__end__'}
    messages = [system_prompt] + state['messages']
    model = _get_model().with_structured_output(Task)
    # print(messages)
    response = model.invoke(messages)
    ### DEBUGGING
    # print(response)
    # print(state)
    # response.done = True
    ### DEBUGGING
    if response.done:
        return {'current_step': '__end__'}
    state['current_step'] = response.next_agent
    if response.next_agent == 'pentester':
        return {
                'current_step': 'pentester',
                'pentest_tasks': response.tasks,
                }
    return {'current_step': '__end__'}
