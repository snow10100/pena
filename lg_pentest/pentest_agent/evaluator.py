from typing_extensions import Annotated, TypedDict, List, Optional, Dict, Literal
from lg_pentest.pentest_agent.utils.model import _get_model
from lg_pentest.pentest_agent.utils.state import PentestState
from langchain_core.messages import SystemMessage, HumanMessage, ToolMessage

class Task(TypedDict):
    """Task evaluation"""
    message: Annotated[str, ..., "The message to respond to the user"]
    evaluation: Annotated[str, ..., "Evaluate the pentester response, see if he finished the task"]
    done: Annotated[bool, ..., "True if the pentester finished the task"]
    fail: Annotated[bool, ..., "True if the pentester can't finish the task, this will end the program"]
    # message: str
    # phase: Annotated[str, ... , "Current phase of pentesting"]
    # task: Annotated[str, ... , "Task to perform so that the tool agent succeeds."]
    # hints: Annotated[Optional[List[str]], ... , "May contain hints about the task"]
    # constraints: Annotated[Optional[List[str]], ... , "Contains constraints that the tool user agent should be aware of"]
    # program_name: Annotated[str, ... , "Program name that the tool uses to finish a task"]
    # args: Annotated[Optional[Dict], ... , "Args that might help the tool user agent"]
    # results: Annotated[Dict, ... , "Title of findings as keys, and a description as their value"]
    # results: str

def evaluator(state: PentestState) -> PentestState:
    system_message = SystemMessage("""
    You are evaluating the response from a pentester agent, 
    if the pentester brings back some results, give him a pass,
    if he did very bad, and you think he can do better, point 
    out his mistake and make him redo it again, if the pentester
    can't do the task. End the program, and let the supervisor know. 
    """)

    model = _get_model().with_structured_output(Task)
    messages = [system_message] + [HumanMessage(content=f"evaluate pentester results {state['tool_results']}")]
    response = model.invoke(messages)

    if response['done'] or response['fail']:
        response['evaluation'] += 'end program now'
    return {
            'messages': [{'type': 'evaluator',
                         'content': response['message']}],
            'evaluation': response['evaluation'],
            'current_step': 'supervisor' if response['done'] or response['fail'] else 'pentester'
                         }

