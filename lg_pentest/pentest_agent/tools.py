from typing import TypedDict, Literal, Optional, List, Annotated
from lg_pentest.pentest_agent.utils.model import _get_model
from lg_pentest.pentest_agent.utils.state import PentestState
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.pydantic_v1 import BaseModel, Field

class Task(BaseModel):
    """The task that the tools needs to do"""
    phase: str = Field(description="Current phase of pentesting")
    task: str = Field(description="Task to perform so that the tool agent succeds.")
    hints: Optional[List[str]] = Field(description="May contain hints about the task")
    constraints: Optional[List[str]] = Field(description="Contains constraints that the tool user agent should be aware of")
    program_name: str = Field(description="program name that the tool uses to finish a task")
    args: Optinal[dict] = Field(description="args that might help the tool user agent")
    results: dict = Field(description="Title of findings as keys, and a description as their value")

    

system_prompt = SystemMessage(f"""
You are an AI agent who is an expert in using a tool named {Task.program_name}, to do {Task.task}.
You are working with a team of AI agents, you will receive a task, and possibly hints, 
constrains, and args. You will have to use your expertise in {Task.program_name} to finish
the task. When you are done pass the results to the calling agent. 
""")


def tools(state: PentestState) -> PentestState:
    print(f'{system_prompt = }')
    messages = [system_prompt] 
    model = _get_model().with_structured_output(Task)
    response = model.invoke(messages)
    print(f'tools:\n{response = }')
    return {'tool_results': Task.results}
