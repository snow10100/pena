from typing import Annotated, TypedDict, Literal

from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage


from lg_pentest.pentest_agent.supervisor import supervisor
from lg_pentest.pentest_agent.pentester import pentester 
from lg_pentest.pentest_agent.evaluator import evaluator
from lg_pentest.pentest_agent.utils.state import PentestState, GraphConfig



def tools(state: PentestState) -> PentestState:
    # Logic for tools node
    return {'pentest_results': {'vulnerability': 'SQL Injection found'}, 'current_step': 'pentester'}

def recorder(state: PentestState) -> PentestState:
    # Logic for recorder node
    return {'report': 'Pentest Report: Critical SQL Injection vulnerability found', 'current_step': 'end'}

def route_supervisor(state: PentestState) -> Literal['pentester', 'evaluator', 'recorder', '__end__']:
    return state['current_step']

def route_pentester(state: PentestState) -> Literal['tools', 'evaluator']:
    return 'tools' if state['current_step'] == 'pentester' else 'evaluator' 


# Create the graph
workflow = StateGraph(PentestState, config_schema=StateGraph)

# Add nodes
workflow.add_node('supervisor', supervisor)
workflow.add_node('pentester', pentester)
workflow.add_node('tools', tools)
workflow.add_node('evaluator', evaluator)
workflow.add_node('recorder', recorder)

# Add edges
workflow.set_entry_point('supervisor')
workflow.add_conditional_edges('supervisor', route_supervisor)
workflow.add_conditional_edges('pentester', route_pentester)
workflow.add_edge('tools', 'pentester')
workflow.add_edge('evaluator', 'supervisor')
workflow.add_edge('recorder', 'supervisor')

# Compile the graph
pentest_graph = workflow.compile()
